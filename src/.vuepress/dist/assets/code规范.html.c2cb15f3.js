import{_ as n}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as s,c as t,e as a}from"./app.b0370e1b.js";const o={},r=a(`<p><strong>周末快乐！今天的内容有点不同。</strong></p><p><strong>对，你没看错，本文就是教你怎么写出让同事无法维护的代码。咳咳，写烂代码都能写得这么有创意，这也不失为一种能力啊（狗头）。。</strong></p><h2 id="一、程序命名" tabindex="-1"><a class="header-anchor" href="#一、程序命名" aria-hidden="true">#</a> <strong>一、程序命名</strong></h2><ul><li><strong>容易输入的变量名</strong> 。比如：Fred，asdf</li><li><strong>单字母的变量名</strong> 。比如：a,b,c, x,y,z（如果不够用，可以考虑a1,a2,a3,a4,….）</li><li><strong>有创意地拼写错误</strong> 。比如：SetPintleOpening， SetPintalClosing。这样可以让人很难搜索代码。</li><li><strong>抽象</strong> 。比如：ProcessData, DoIt, GetData… 抽象到就跟什么都没说一样。</li><li><strong>缩写</strong> 。比如：WTF，RTFSC …… （使用拼音缩写也同样给力，比如：BT，TMD，TJJTDS）</li><li><strong>随机大写字母</strong> 。比如：gEtnuMbER..</li><li><strong>重用命名</strong> 。在内嵌的语句块中使用相同的变量名有奇效。</li><li><strong>使用重音字母</strong> 。比如：int ínt（第二个 ínt不是int）</li><li><strong>使用下划线</strong> 。比如：_, __, ___。</li><li><strong>使用不同的语言</strong> 。比如混用英语，德语，或是中文拼音。</li><li><strong>使用字符命名</strong> 。比如：slash, asterix, comma…</li><li><strong>使用无关的单词</strong> 。比如：god, superman, iloveu….</li><li><strong>混淆l和1</strong> 。字母l和数字1有时候是看不出来的。</li></ul><h2 id="二、伪装欺诈" tabindex="-1"><a class="header-anchor" href="#二、伪装欺诈" aria-hidden="true">#</a> <strong>二、伪装欺诈</strong></h2><ul><li><p><strong>把注释和代码交织在一起。</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>array_len<span class="token punctuation">;</span> j<span class="token operator">+</span> <span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    total <span class="token operator">+=</span> array<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>
    total <span class="token operator">+=</span> array<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>
    total <span class="token operator">+=</span> array<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">2</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">/* Main body of
    total += array[j+3]; * loop is unrolled
    total += array[j+4]; * for greater speed.
    total += array[j+5]; */</span>
    total <span class="token operator">+=</span> array<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">6</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>
    total <span class="token operator">+=</span> array<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">7</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>代码和显示不一致</strong> 。比如，你的界面显示叫postal code，但是代码里确叫 zipcode.</p></li><li><p><strong>隐藏全局变量</strong> 。把使用全局变量以函数参数的方式传递给函数，这样可以让人觉得那个变量不是全局变量。</p></li><li><p><strong>使用相似的变量名</strong> 。如：单词相似，swimmer 和 swimner，字母相似：ilI1| 或 oO08。parselnt 和 parseInt， D0Calc 和 DOCalc。还有这一组：xy_Z, xy__z, _xy_z, _xyz, XY_Z, xY_z, Xy_z。</p></li><li><p><strong>重载函数</strong> 。使用相同的函数名，但是其功能和具体实现完全没有关系。</p></li><li><p><strong>操作符重载</strong> 。重载操作符可以让你的代码变得诡异，感谢CCTV，感谢C++。这个东西是可以把混乱代码提高到一种艺术的形式。比如：重载一个类的 ! 操作符，但实际功能并不是取反，让其返回一个整数。于是，如果你使用 ! ! 操作符，那么，有意思的事就发生了—— 先是调用类的重载 ! 操作符，然后把其返回的整数给 ! 成了 布尔变量，如果是 !!! 呢？呵呵。</p></li></ul><h2 id="三、文档和注释" tabindex="-1"><a class="header-anchor" href="#三、文档和注释" aria-hidden="true">#</a> <strong>三、文档和注释</strong></h2><ul><li><strong>在注释中撒谎</strong> 。你不用真的去撒谎，只需在改代码的时候不要更新注释就可以了。</li><li><strong>注释里面写废话</strong> 。比如：/* add 1 to i */</li><li><strong>只注释是什么，而不是为什么</strong> 。</li><li><strong>不要注释秘密</strong> 。如果你开发一个航班系统，请你一定要保证每有一个新的航班被加入，就得要修改25个以上的位置的程序。千万别把这个事写在文档中。</li><li><strong>注重细节</strong> 。当你设计一个很复杂的算法的时候，你一定要把所有的详细细设计都写下来，没有100页不能罢休，段落要有5级以上，段落编号要有500个以上，例如：1.2.4.6.3.13 – Display all impacts for activity where selected mitigations can apply (short pseudocode omitted). 这样，当你写代码的时候，你就可以让你的代码和文档一致，如：Act1_2_4_6_3_13()千万不要注释度衡单位。比如时间用的是秒还是毫秒，尺寸用的是像素还是英寸，大小是MB还是KB。等等。另外，在你的代码里，你可以混用不同的度衡单位，但也不要注释。</li><li><strong>Gotchas 。陷阱</strong> ，千万不要注释代码中的陷阱。</li><li><strong>在注释和文档中发泄不满</strong> 。</li></ul><h2 id="四、程序设计" tabindex="-1"><a class="header-anchor" href="#四、程序设计" aria-hidden="true">#</a> <strong>四、程序设计</strong></h2><ul><li><strong>Java Casts</strong> 。Java的类型转型是天赐之物。每一次当你从Collection里取到一个object的时候，你都需要把其转回原来的类型。因些，这些转型操作会出现在N多的地方。如果你改变了类型，那么你不一定能改变所有的地方。而编译器可能能检查到，也可能检查不到。</li><li><strong>利用Java的冗余</strong> 。比如：Bubblegum b = new Bubblegom(); 和 swimmer = swimner + 1; 注意变量间的细微差别。</li><li><strong>从不验证</strong> 。从不验证输入的数据，从不验证函数的返回值。这样做可以向大家展示你是多么的信任公司的设备和其它程序员</li><li><strong>不要封装</strong> 。调用者需要知道被调用的所有的细节。</li><li><strong>克隆和拷贝</strong> 。为了效率，你要学会使用copy + paste。你几乎都不用理解别人的代码，你就可以高效地编程了。</li><li><strong>巨大的listener</strong> 。写一个listener，然后让你的所有的button类都使用这个listener，这样你可以在这个listener中整出一大堆if…else…语句，相当的刺激。</li><li><strong>使用三维数组</strong> 。如果你觉得三维还不足够，你可以试试四维。</li><li><strong>混用</strong> 。同时使用类的get/set方法和直接访问那个public变量。这样做的好处是可以极大的挫败维护人员。</li><li><strong>包装，包装，包装</strong> 。把你所有的API都包装上6到8遍，包装深度多达4层以上。然后包装出相似的功能。</li><li><strong>没有秘密</strong> 。把所有的成员都声明成public的。这样，你以后就很难限制其被人使用，而且这样可以和别的代码造成更多的耦合度，可以让你的代码存活得更久。</li><li><strong>排列和阻碍</strong> 。把drawRectangle(height, width) 改成 drawRectangle(width, height)，等release了几个版本后，再把其改回去。这样维护程序的程序员们很快就不明白哪一个是对的。</li><li><strong>把变量改在名字上</strong> 。例如，把setAlignment(int alignment)改成，setLeftAlignment, setRightAlignment, setCenterAlignment。</li><li><strong>保留你所有的没有使用的和陈旧的变量，方法和代码</strong> 。</li><li><strong>Final你所有的子结点的类</strong> ，这样，当你做完这个项目后，没有人可以通过继承来扩展你的类。java.lang.String不也是这样吗？</li><li><strong>避免使用layout</strong> 。这样就使得我们只能使用绝对坐标。如果你的老大强制你使用layout，你可以考虑使用GridBagLayout，然后把grid坐标hard code.</li><li><strong>环境变量</strong> 。如果你的代码需要使用环境变量。那么，你应该把你的类的成员的初始化使用环境变量，而不是构造函数。</li><li><strong>使用全局变量</strong> 。1）把全局变量的初始化放在不同的函数中，就算这个函数和这个变量没有任何关系，这样能够让我们的维护人员就像做侦探工作一样。2）使用全局变量可以让你的函数的参数变得少一些。</li><li><strong>配置文件</strong> 。配置文件主要用于一些参数的初始化。在编程中，我们可以让配置文件中的参数名和实际程序中的名字不一样。</li><li><strong>膨胀你的类</strong> 。让你的类尽可能地拥有各种臃肿和晦涩的方法。比如，你的类只实现一种可能性，但是你要提供所有可能性的方法。不要定义其它的类，把所有的功能都放在一个类中。</li><li><strong>使用子类</strong> 。面向对象是写出无法维护代码的天赐之物。如果你有一个类有十个成为（变量和方法）你可以考虑写10个层次的继承，然后把这十个属性分别放在这十个层次中。如果可能的话，把这十个类分别放在十个不同的文件中。</li><li><strong>混乱你的代码。</strong> 使用XML。XML的强大是无人能及的。使用XML你可以把本来只要10行的代码变成100行。而且，还要逼着别人也有XML。（参看，信XML得永生，信XML得自信）</li><li><strong>分解条件表达式</strong> 。如：把 a==100分解成，a&gt;99 &amp;&amp; a&lt;101</li><li><strong>学会利用分号</strong> 。如：if ( a );else;{ int d; d = c;}.</li><li><strong>间接转型</strong> 。如：把double转string，写成new Double(d).toString() 而不是 Double.toString(d)</li><li><strong>大量使用嵌套</strong> 。一个NB的程序员可以在一行代码上使用超过10层的小括号（），或是在一个函数里使用超过20层的语句嵌套{}，把嵌套的if else 转成 [? :] 也是一件很NB的事。</li><li><strong>长代码行</strong> 。一行的代码越长越好。这样别人阅读时就需要来来回回的</li><li><strong>不要过早的return</strong> 。不要使用break，这样，你就需要至少5层以上的if-else来处理错误。</li><li><strong>不要使用{}。不要在if else使用{}</strong> ，尤其是在你重量地使用if-else嵌套时，你甚至可以在其中乱缩进代码，这样一来，就算是最有经验的程序员也会踩上陷阱。</li><li><strong>琐碎的封装</strong> 。比较封装一个bool类，类里面什么都做，就是一个bool.</li><li><strong>循环</strong> 。千万不可用for(int i=0; i&lt;n; i++)使用while代替for，交换n和i，把&lt;改成&lt;=，使用 i–调整步伐 。</li></ul><h2 id="五、测试" tabindex="-1"><a class="header-anchor" href="#五、测试" aria-hidden="true">#</a> <strong>五、测试</strong></h2><ul><li><strong>从不测试</strong> 。千万不要测试任何的出错处理，从来也不检测系统调用的返回值。</li><li><strong>永远不做性能测试</strong> 。如果不够快就告诉用户换一个更快的机器。如果你一做测试，那么就可能会要改你的算法，甚至重设计，重新架构。</li><li><strong>不要写测试案例</strong> 。不要做什么代码覆盖率测试，自动化测试。</li><li><strong>测试是懦夫行为</strong> 。一个勇敢的程序员是根本不需要这一步的。太多的程序太害怕他们的老板，害怕失去工作，害怕用户抱怨，甚至被起诉。这种担心害怕直接影响了生产力。如果你对你的代码有强大的信心，那还要什么测试呢？真正的程序员是不需要测试自己的代码的。</li></ul><h2 id="六、其他" tabindex="-1"><a class="header-anchor" href="#六、其他" aria-hidden="true">#</a> <strong>六、其他</strong></h2><ul><li><strong>你的老板什么都知道</strong> 。无论你的老板有多SB，你都要严格地遵照他的旨意办事，这样一来，你会学到更多的知识以及如何写出更加无法维护的代码。</li><li><strong>颠覆Help Desk</strong> 。你要确保你那满是bug的程序永远不要被维护团队知道。当用户打电话和写邮件给你的时候，你就不要理会，就算要理会，让用户重做系统或是告诉用户其帐号有问题，是标准的回答。</li><li><strong>闭嘴</strong> 。对于一些像y2k这样的大bug，你要学会守口如瓶，不要告诉任何人，包括你的亲人好友以及公司的同事和管理层，这样当到那一天的时候，你就可以用这个bug挣钱了。</li><li><strong>忽悠</strong> 。你会学会忽悠，就算你的代码写得很烂，你也要为其挂上GoF设计模式的标签，就算你的项目做得再烂，你也要为其挂上敏捷的标签，让整个团队和公司，甚至整个业界都开始躁动，这样才能真正为难维护的代码铺平道路。</li></ul><p>总之，我们的口号是—— <strong>Write Everywhere, Read Nowhere</strong></p><p><strong>以上，周末快乐！</strong></p>`,16),l=[r];function i(e,g){return s(),t("div",null,l)}const u=n(o,[["render",i],["__file","code规范.html.vue"]]);export{u as default};
