import{_ as e}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as a,c as o,e as t}from"./app.b0370e1b.js";const n={},l=t(`<p>xml 是可扩展的标记性语言。</p><p>作用：保存数据、配置文件、作为网络传输数据的格式（Json）</p><h2 id="一、-语法" tabindex="-1"><a class="header-anchor" href="#一、-语法" aria-hidden="true">#</a> 一、 语法</h2><h3 id="_1-声明" tabindex="-1"><a class="header-anchor" href="#_1-声明" aria-hidden="true">#</a> 1. 声明</h3><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-注释" tabindex="-1"><a class="header-anchor" href="#_2-注释" aria-hidden="true">#</a> 2. 注释</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;!-- 内容 --&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3-xml元素" tabindex="-1"><a class="header-anchor" href="#_3-xml元素" aria-hidden="true">#</a> 3. xml元素</h3><p>元素是指从开始标签到结束标签的内容。</p><p>例如：&lt;title&gt;java 编程思想 &lt;/title&gt;</p><p>也有单标签和双标签</p><h3 id="_4-命名规则" tabindex="-1"><a class="header-anchor" href="#_4-命名规则" aria-hidden="true">#</a> 4. 命名规则</h3><blockquote><ol><li>可以含字母、数字以及其他的字符</li><li>不能以数字或者标点符号开始</li><li>不能包含空格</li></ol></blockquote><h3 id="_5-文本区域-cdata区" tabindex="-1"><a class="header-anchor" href="#_5-文本区域-cdata区" aria-hidden="true">#</a> 5.文本区域（CDATA区）<sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup></h3><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token cdata">&lt;![CDATA[ 文本 ]]&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="二、-规则" tabindex="-1"><a class="header-anchor" href="#二、-规则" aria-hidden="true">#</a> 二、 规则</h2><blockquote><ol><li>所有xml元素需闭合</li><li>需正确嵌套</li><li>必须有根元素<sup class="footnote-ref"><a href="#footnote2">[2]</a><a class="footnote-anchor" id="footnote-ref2"></a></sup>，且<mark>唯一</mark></li><li>一个标签上可以书写多个属性，每个属性的值必须使用 <mark>引号</mark> 引起来。</li><li>特殊字符特殊处理，例如：&gt; 用&amp;gt</li></ol></blockquote><h2 id="三、-xml解析" tabindex="-1"><a class="header-anchor" href="#三、-xml解析" aria-hidden="true">#</a> 三、 xml解析</h2><p>早期 JDK 为我们提供了两种 xml 解析技术 DOM 和 Sax<sup class="footnote-ref"><a href="#footnote3">[3]</a><a class="footnote-anchor" id="footnote-ref3"></a></sup></p><h3 id="dom4j-解析技术" tabindex="-1"><a class="header-anchor" href="#dom4j-解析技术" aria-hidden="true">#</a> dom4j 解析技术<sup class="footnote-ref"><a href="#footnote4">[4]</a><a class="footnote-anchor" id="footnote-ref4"></a></sup></h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>// 第一步，通过创建 SAXReader 对象。来读取 xml 文件，获取 Document 对象
	SAXReader reader = new SAXReader();
	Document document = reader.read(&quot;xml路径&quot;);

// 第二步，通过 Document 对象。拿到 XML 的根元素对象
	Element root = document.getRootElement();
	
// 第三步，通过根元素对象。获取所有的 book 标签对象
	List&lt;Element&gt; books = root.elements(&quot;book&quot;);
	
// 第四步，遍历每个 book 标签对象。然后获取到 book 标签对象内的每一个元素，
	for (Element book : books) {
		// 拿到 book 下面的 name 元素对象
		Element nameElement = book.element(&quot;name&quot;);
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><ol><li>Element.asXML() ：将当前元素转换成为 String 对象</li><li>getText() ：拿到起始标签和结束标签之间的文本内容</li><li>Element.attributeValue(&quot;属性名&quot;)：获取标签内属性值</li></ol></blockquote><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="footnote1" class="footnote-item"><p>CDATA 语法可以告诉 xml 解析器，我 CDATA 里的文本内容，只是纯文本，不需要xml 语法解析 <a href="#footnote-ref1" class="footnote-backref">↩︎</a></p></li><li id="footnote2" class="footnote-item"><p>根元素就是顶级元素， 没有父标签的元素，叫顶级元素 <a href="#footnote-ref2" class="footnote-backref">↩︎</a></p></li><li id="footnote3" class="footnote-item"><p>sun 公司在 JDK5 版本对 dom 解析技术进行升级，不会创建大量的 dom 对象 <a href="#footnote-ref3" class="footnote-backref">↩︎</a></p></li><li id="footnote4" class="footnote-item"><p>由于 dom4j 它不是 sun 公司的技术，而属于第三方公司的技术，我们需要使用dom4j 就需要到dom4j 官网下载dom4j的 jar 包。 <a href="#footnote-ref4" class="footnote-backref">↩︎</a></p></li></ol></section>`,24),i=[l];function s(d,r){return a(),o("div",null,i)}const u=e(n,[["render",s],["__file","xml.html.vue"]]);export{u as default};
