import{_ as n}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as a,c as s,e as t}from"./app.b0370e1b.js";const e={},p=t(`<h1 id="java" tabindex="-1"><a class="header-anchor" href="#java" aria-hidden="true">#</a> Java</h1><h2 id="_1-入门" tabindex="-1"><a class="header-anchor" href="#_1-入门" aria-hidden="true">#</a> 1. 入门</h2><h3 id="_1-1-cmd命令" tabindex="-1"><a class="header-anchor" href="#_1-1-cmd命令" aria-hidden="true">#</a> 1.1 cmd命令<sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup></h3><table><thead><tr><th>操作</th><th>说明</th></tr></thead><tbody><tr><td>盘符名称:</td><td>盘符切换。E:回车，表示切换到E盘。</td></tr><tr><td>dir</td><td>查看当前路径下的内容。</td></tr><tr><td>cd 目录</td><td>进入单级目录。cd itheima</td></tr><tr><td>cd ..</td><td>回退到上一级目录。</td></tr><tr><td>cd 目录1\\目录2...</td><td>进入多级目录。cd itheima\\JavaSE</td></tr><tr><td>cd \\</td><td>回退到盘符目录。</td></tr><tr><td>cls</td><td>清屏。</td></tr><tr><td>exit</td><td>退出命令提示符窗口。</td></tr></tbody></table><h3 id="_1-2-jdk目录" tabindex="-1"><a class="header-anchor" href="#_1-2-jdk目录" aria-hidden="true">#</a> 1.2 JDK目录</h3><table><thead><tr><th>目录名称</th><th>说明</th></tr></thead><tbody><tr><td>bin</td><td>该路径下存放了JDK的各种工具命令。javac和java就放在这个目录。</td></tr><tr><td>conf</td><td>该路径下存放了JDK的相关配置文件。</td></tr><tr><td>include</td><td>该路径下存放了一些平台特定的头文件。</td></tr><tr><td>jmods</td><td>该路径下存放了JDK的各种模块。</td></tr><tr><td>legal</td><td>该路径下存放了JDK各模块的授权文档。</td></tr><tr><td>lib</td><td>该路径下存放了JDK工具的一些补充JAR包。</td></tr></tbody></table><h3 id="_1-3-流程" tabindex="-1"><a class="header-anchor" href="#_1-3-流程" aria-hidden="true">#</a> 1.3 流程</h3><blockquote><p>java文件：程序员自己编写的代码。</p><p>class文件：交给计算机执行的文件。</p></blockquote><blockquote><p>javac + 文件名 + 后缀名 （就是编译java文件）</p><p>java + 文件名（运行编译之后的class文件）</p></blockquote><h3 id="_1-4-jdk和jre" tabindex="-1"><a class="header-anchor" href="#_1-4-jdk和jre" aria-hidden="true">#</a> 1.4 JDK和JRE</h3><blockquote><p>JVM，Java虚拟机</p><p>JRE，Java运行环境，包含了JVM和Java的核心类库（Java API）</p><p>JDK，称为Java开发工具，包含了JRE和开发工具</p></blockquote><h3 id="_1-5-java跨平台原理" tabindex="-1"><a class="header-anchor" href="#_1-5-java跨平台原理" aria-hidden="true">#</a> 1.5 Java跨平台原理</h3><ul><li><p>操作系统本身其实是不认识Java语言的</p></li><li><p>针对不同的操作系统，Java提供了不同的虚拟机。虚拟机会把Java语言翻译成操作系统能看得懂的语言</p></li><li><p>一次编译，处处可用</p></li></ul><h2 id="_2-基础语法" tabindex="-1"><a class="header-anchor" href="#_2-基础语法" aria-hidden="true">#</a> 2. 基础语法</h2><h3 id="_2-1-注释" tabindex="-1"><a class="header-anchor" href="#_2-1-注释" aria-hidden="true">#</a> 2.1 注释</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>//				单行注释
/*   */			多行注释
/**  */      	文档注释
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-关键字" tabindex="-1"><a class="header-anchor" href="#_2-2-关键字" aria-hidden="true">#</a> 2.2 关键字</h3><table><thead><tr><th><strong>abstract</strong></th><th><strong>assert</strong></th><th><strong>boolean</strong></th><th><strong>break</strong></th><th><strong>byte</strong></th></tr></thead><tbody><tr><td><strong>case</strong></td><td><strong>catch</strong></td><td><strong>char</strong></td><td><strong>class</strong></td><td><strong>const</strong></td></tr><tr><td><strong>continue</strong></td><td><strong>default</strong></td><td><strong>do</strong></td><td><strong>double</strong></td><td><strong>else</strong></td></tr><tr><td><strong>enum</strong></td><td><strong>extends</strong></td><td><strong>final</strong></td><td><strong>finally</strong></td><td><strong>float</strong></td></tr><tr><td><strong>for</strong></td><td><strong>goto</strong></td><td><strong>if</strong></td><td><strong>implements</strong></td><td><strong>import</strong></td></tr><tr><td><strong>instanceof</strong></td><td><strong>int</strong></td><td><strong>interface</strong></td><td><strong>long</strong></td><td><strong>native</strong></td></tr><tr><td><strong>new</strong></td><td><strong>package</strong></td><td><strong>private</strong></td><td><strong>protected</strong></td><td><strong>public</strong></td></tr><tr><td><strong>return</strong></td><td><strong>strictfp</strong></td><td><strong>short</strong></td><td><strong>static</strong></td><td><strong>super</strong></td></tr><tr><td><strong>switch</strong></td><td><strong>synchronized</strong></td><td><strong>this</strong></td><td><strong>throw</strong></td><td><strong>throws</strong></td></tr><tr><td><strong>transient</strong></td><td><strong>try</strong></td><td><strong>void</strong></td><td><strong>volatile</strong></td><td><strong>while</strong></td></tr></tbody></table><h3 id="_2-3-字面量" tabindex="-1"><a class="header-anchor" href="#_2-3-字面量" aria-hidden="true">#</a> 2.3 字面量</h3><p>整数、小数、字符、字符串、布尔值、空值</p><h3 id="_2-4-变量" tabindex="-1"><a class="header-anchor" href="#_2-4-变量" aria-hidden="true">#</a> 2.4 变量</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>数据类型 变量名 = 数据值；
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>变量名不能重复</li><li>在一条语句中，可以定义多个变量</li><li>使用之前必须要赋值</li></ul><h3 id="_2-5-数据类型" tabindex="-1"><a class="header-anchor" href="#_2-5-数据类型" aria-hidden="true">#</a> 2.5 数据类型</h3><ul><li>基本数据类型</li><li>引用数据类型</li></ul><table><thead><tr><th style="text-align:center;">基本数据类型</th><th style="text-align:center;">关键字</th><th style="text-align:center;">内存占用</th><th style="text-align:center;">取值范围</th></tr></thead><tbody><tr><td style="text-align:center;">整数</td><td style="text-align:center;">byte</td><td style="text-align:center;">1</td><td style="text-align:center;">负的2的7次方 ~ 2的7次方-1(-128~127)</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">short</td><td style="text-align:center;">2</td><td style="text-align:center;">负的2的15次方 ~ 2的15次方-1(-32768~32767)</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">int</td><td style="text-align:center;">4</td><td style="text-align:center;">负的2的31次方 ~ 2的31次方-1</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">long</td><td style="text-align:center;">8</td><td style="text-align:center;">负的2的63次方 ~ 2的63次方-1</td></tr><tr><td style="text-align:center;">浮点数</td><td style="text-align:center;">float</td><td style="text-align:center;">4</td><td style="text-align:center;">1.401298e-45 ~ 3.402823e+38</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">double</td><td style="text-align:center;">8</td><td style="text-align:center;">4.9000000e-324 ~ 1.797693e+308</td></tr><tr><td style="text-align:center;">字符</td><td style="text-align:center;">char</td><td style="text-align:center;">2</td><td style="text-align:center;">0-65535</td></tr><tr><td style="text-align:center;">布尔</td><td style="text-align:center;">boolean</td><td style="text-align:center;">1</td><td style="text-align:center;">true，false</td></tr></tbody></table><p>注意<sup class="footnote-ref"><a href="#footnote2">[2]</a><a class="footnote-anchor" id="footnote-ref2"></a></sup></p><blockquote><p>整数类型和小数类型的取值范围大小关系：</p><p>double &gt; float &gt; long &gt; int &gt; short &gt; byte</p></blockquote><h3 id="_2-6-标识符" tabindex="-1"><a class="header-anchor" href="#_2-6-标识符" aria-hidden="true">#</a> 2.6 标识符</h3><ul><li>只能由数字、字母、下划线_、美元符号$组成</li><li>数字不能开头</li><li>不能是关键字</li><li>区分大小写</li></ul><h4 id="小驼峰命名" tabindex="-1"><a class="header-anchor" href="#小驼峰命名" aria-hidden="true">#</a> 小驼峰命名</h4><blockquote><p>适用于变量名和方法名，如：name、firstName</p></blockquote><h4 id="大驼峰命名" tabindex="-1"><a class="header-anchor" href="#大驼峰命名" aria-hidden="true">#</a> 大驼峰命名</h4><blockquote><p>适用于类名，如：Demo、HelloWorld</p></blockquote><h3 id="_2-7-键盘录入" tabindex="-1"><a class="header-anchor" href="#_2-7-键盘录入" aria-hidden="true">#</a> 2.7 键盘录入</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//1.导包，找到Scanner这个类在哪</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ScannerDemo1</span><span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token comment">//2.创建对象，申明一下，准备开始用Scanner这个类</span>
		<span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">//3.接收数据</span>
		<span class="token comment">//当程序运行之后，在键盘输入的数据就会被变量i给接收</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;请输入一个数字&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">int</span> i <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="进阶" tabindex="-1"><a class="header-anchor" href="#进阶" aria-hidden="true">#</a> 进阶</h4><h5 id="_1-next-和-nextline" tabindex="-1"><a class="header-anchor" href="#_1-next-和-nextline" aria-hidden="true">#</a> 1. next() 和 nextLine()</h5><p>可以接受任意数据，但是都会返回一个字符串</p><h5 id="_2-nextint" tabindex="-1"><a class="header-anchor" href="#_2-nextint" aria-hidden="true">#</a> 2. nextInt()</h5><p>只能接受整数</p><h5 id="_3-nextdouble" tabindex="-1"><a class="header-anchor" href="#_3-nextdouble" aria-hidden="true">#</a> 3. nextDouble()</h5><p>能接收整数和小数，但是都会看做小数返回</p><h5 id="细节" tabindex="-1"><a class="header-anchor" href="#细节" aria-hidden="true">#</a> 细节</h5><ul><li>next（），nextInt（），nextDouble（）在接收数据的时候，会遇到空格，回车，制表符其中一个就会停止接收数据。但是这些符号 + 后面的数据还在内存中并没有接收。如果后面还有其他键盘录入的方法，会自动将这些数据接收。</li><li>nextLine（）方法是把一整行全部接收完毕，想要整数，先接收，再使用Integer.parseInt进行类型转换</li><li><mark>以上两套不能混用</mark></li></ul><h2 id="_3-运算符与表达式" tabindex="-1"><a class="header-anchor" href="#_3-运算符与表达式" aria-hidden="true">#</a> 3. 运算符与表达式</h2><p>分类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token operator">+</span> <span class="token operator">-</span> <span class="token operator">*</span> <span class="token operator">/</span> <span class="token operator">%</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>个位：数字 % 10</p><p>十位：数字 / 10 % 10</p><p>百位：数字 / 100 % 10</p><p>千位：数字 / 1000 % 10</p></blockquote><h3 id="_3-1-隐式转换" tabindex="-1"><a class="header-anchor" href="#_3-1-隐式转换" aria-hidden="true">#</a> 3.1 隐式转换</h3><ul><li>取值范围小的，和取值范围大的进行运算，小的会先提升为大的，再进行运算。</li><li>byte、short、char三种类型的数据在运算的时候，都会直接先提升为int，然后再进行运算。</li></ul><blockquote><p>取值范围从小到大</p><p>byte short int long float double</p></blockquote><h3 id="_3-2-强制转换" tabindex="-1"><a class="header-anchor" href="#_3-2-强制转换" aria-hidden="true">#</a> 3.2 强制转换</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>目标数据类型 变量名 <span class="token operator">=</span> （目标数据类型）被强转的数据；
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3-3-字符与字符串相加" tabindex="-1"><a class="header-anchor" href="#_3-3-字符与字符串相加" aria-hidden="true">#</a> 3.3 字符与字符串相加</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token string">&quot;abc&quot;</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span>
<span class="token comment">// 结果：“3abc21”</span>
    
<span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> result <span class="token operator">=</span> c <span class="token operator">+</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token comment">// 结果：97</span>
<span class="token comment">// 拿着字符到计算机内置的ASCII码表中去查对应的数字，然后再进行计算</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-4-自增自减运算符" tabindex="-1"><a class="header-anchor" href="#_3-4-自增自减运算符" aria-hidden="true">#</a> 3.4 自增自减运算符</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token operator">++</span>  自增运算符
<span class="token operator">--</span>  自减运算符
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-5-赋值运算符" tabindex="-1"><a class="header-anchor" href="#_3-5-赋值运算符" aria-hidden="true">#</a> 3.5 赋值运算符</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token operator">=</span>	<span class="token operator">+=</span>	<span class="token operator">-=</span>	<span class="token operator">*=</span>	<span class="token operator">/=</span>	<span class="token operator">%=</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>扩展的赋值运算符中隐层还包含了一个强制转换</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">byte</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
a <span class="token operator">+=</span> b<span class="token punctuation">;</span>
<span class="token comment">// a = (byte)(a + b);</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-6-关系运算符" tabindex="-1"><a class="header-anchor" href="#_3-6-关系运算符" aria-hidden="true">#</a> 3.6 关系运算符</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token operator">==</span>	<span class="token operator">!=</span>	<span class="token operator">&gt;</span>	<span class="token generics"><span class="token punctuation">&lt;</span>	<span class="token punctuation">&gt;</span></span><span class="token operator">=</span>	<span class="token operator">&lt;=</span>	
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>关系运算符最终的结果一定是布尔类型的</li></ul><h3 id="_3-7-逻辑运算符" tabindex="-1"><a class="header-anchor" href="#_3-7-逻辑运算符" aria-hidden="true">#</a> 3.7 逻辑运算符</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token operator">&amp;</span>	<span class="token operator">|</span>	<span class="token operator">^</span>	<span class="token operator">!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>异或（^）：如果两边相同，结果为false，如果两边不同，结果为true</p><p>取反（!）：取反最多只能用一个</p></blockquote><h3 id="_3-8-短路逻辑运算符" tabindex="-1"><a class="header-anchor" href="#_3-8-短路逻辑运算符" aria-hidden="true">#</a> 3.8 短路逻辑运算符</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token operator">&amp;&amp;</span>	<span class="token operator">||</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>当左边不能确定整个表达式的结果，右边才会执行</p><p>当左边能确定整个表达式的结果，那么右边就不会执行了。从而提高了代码的运行效率</p></blockquote><h3 id="_3-9-三元运算符" tabindex="-1"><a class="header-anchor" href="#_3-9-三元运算符" aria-hidden="true">#</a> 3.9 三元运算符</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>关系表达式 ？ 表达式<span class="token number">1</span> ：表达式<span class="token number">2</span> ；
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>三元运算符的最终结果一定要被使用，要么赋值给一个变量，要么直接打印出来</li></ul><h3 id="_3-10-运算符优先级" tabindex="-1"><a class="header-anchor" href="#_3-10-运算符优先级" aria-hidden="true">#</a> 3.10 运算符优先级</h3><p>在Java中涉及了很多的运算符，每一种运算符都有各自的优先级。</p><p>只需知道<mark>小括号优先于所有</mark></p><h2 id="_4-流程控制" tabindex="-1"><a class="header-anchor" href="#_4-流程控制" aria-hidden="true">#</a> 4. 流程控制</h2><h3 id="_4-1-if语句" tabindex="-1"><a class="header-anchor" href="#_4-1-if语句" aria-hidden="true">#</a> 4.1 if语句</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>格式：
<span class="token keyword">if</span> <span class="token punctuation">(</span>关系表达式<span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    语句体<span class="token number">1</span><span class="token punctuation">;</span>	
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>关系表达式<span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    语句体<span class="token number">2</span><span class="token punctuation">;</span>	
<span class="token punctuation">}</span> 
…
<span class="token keyword">else</span> <span class="token punctuation">{</span>
    语句体n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>对一个布尔类型的变量进行判断，不要写==，直接把变量写在小括号中即可</li><li>如果大括号中的语句体只有一条，那么大括号可以省略不写</li><li>如果大括号省略了，那么if只能控制距离他最近的那一条语句</li></ul><h3 id="_4-2-switch语句" tabindex="-1"><a class="header-anchor" href="#_4-2-switch语句" aria-hidden="true">#</a> 4.2 switch语句</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">switch</span> <span class="token punctuation">(</span>表达式<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>
		语句体<span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token keyword">break</span><span class="token punctuation">;</span>
	<span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>
		语句体<span class="token number">2</span><span class="token punctuation">;</span>
		<span class="token keyword">break</span><span class="token punctuation">;</span>
	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
	<span class="token keyword">default</span><span class="token operator">:</span>
		语句体n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token keyword">break</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>default可以放在任意位置，也可以省略</li><li>不写break会引发case穿透现象</li><li>switch在JDK12的新特性</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">switch</span> <span class="token punctuation">(</span>number<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token number">1</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;一&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token number">2</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;二&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">default</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;其他&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>当我们需要对一个范围进行判断的时候，用if</p><p>当我们把有限个数据列举出来，选择其中一个执行的时候，用switch</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>利用<span class="token keyword">case</span>穿透简化代码
<span class="token keyword">switch</span> <span class="token punctuation">(</span>week<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>
    <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>
    <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>
    <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>
    <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;工作日&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span>
    <span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;休息日&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;没有这个星期&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>
利用<span class="token constant">JDK12</span>简化代码书写
<span class="token keyword">switch</span> <span class="token punctuation">(</span>week<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;工作日&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;休息日&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">default</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;没有这个星期&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3-循环语句" tabindex="-1"><a class="header-anchor" href="#_4-3-循环语句" aria-hidden="true">#</a> 4.3 循环语句</h3><h4 id="for" tabindex="-1"><a class="header-anchor" href="#for" aria-hidden="true">#</a> for</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;HelloWorld&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="while" tabindex="-1"><a class="header-anchor" href="#while" aria-hidden="true">#</a> while</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;HelloWorld&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    i<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="do-while" tabindex="-1"><a class="header-anchor" href="#do-while" aria-hidden="true">#</a> do...while</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">do</span><span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;HelloWorld&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    i<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>知道循环次数或范围，用for</p><p>不知道循环次数或范围，但是知道循环的结束条件，用while</p></blockquote><h3 id="_4-4-循环进阶" tabindex="-1"><a class="header-anchor" href="#_4-4-循环进阶" aria-hidden="true">#</a> 4.4 循环进阶</h3><h4 id="无限循环" tabindex="-1"><a class="header-anchor" href="#无限循环" aria-hidden="true">#</a> 无限循环</h4><blockquote><p>初始化语句可以空着不写，表示循环之前不定义任何的控制变量。</p><p>条件判断语句可以空着不写，如果不写，默认表示true，循环一直进行。</p><p>条件控制语句可以空着不写，表示每次循环体执行完毕后，控制变量不做任何变化。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;循环执行一直在打印内容&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;循环执行一直在打印内容&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">do</span><span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;循环执行一直在打印内容&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="条件控制" tabindex="-1"><a class="header-anchor" href="#条件控制" aria-hidden="true">#</a> 条件控制</h4><ul><li>break：不能单独存在。用在switch和循环中，表示结束，跳出</li><li>continue：不能单独存在。只能存在循环中，表示跳过本次循环，执行下次循环</li></ul><h4 id="random" tabindex="-1"><a class="header-anchor" href="#random" aria-hidden="true">#</a> Random</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//1.导包</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Random</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RandomDemo1</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//2.创建对象</span>
        <span class="token class-name">Random</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//3.生成随机数</span>
        <span class="token keyword">int</span> number <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//包左不包右，包头不包尾，[0，100)</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-数组" tabindex="-1"><a class="header-anchor" href="#_5-数组" aria-hidden="true">#</a> 5. 数组</h2><h3 id="_5-1-简介" tabindex="-1"><a class="header-anchor" href="#_5-1-简介" aria-hidden="true">#</a> 5.1 简介</h3><p>一种容器，可以同来存储同种数据类型的多个值</p><blockquote><p>需要结合隐式转换考虑</p><p>定义了一个int类型的数组。那么boolean。double类型的数据是不能存到这个数组中的，但是byte类型，short类型，int类型的数据是可以存到这个数组里面的</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">;</span> 	
<span class="token keyword">int</span> array <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> agesArr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   			<span class="token comment">// 动态初始化</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>			<span class="token comment">// 静态初始化</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>数组一旦创建之后，长度不能发生变化</li><li>打印数组的时候，实际出现的是数组的地址值<sup class="footnote-ref"><a href="#footnote3">[3]</a><a class="footnote-anchor" id="footnote-ref3"></a></sup></li></ul><blockquote><p>[I@6d03e736</p><p>[ ：表示现在打印的是一个数组。</p><p>I：表示现在打印的数组是int类型的。</p><p>@：仅仅是一个间隔符号而已。</p><p>6d03e736：就是数组在内存中真正的地址值。（十六进制的）</p></blockquote><p><mark>数组默认初始化值</mark></p><p>整数：0 小数类型：0.0 布尔类型：false 字符类型：&#39;\\u0000&#39; 引用类型：null</p><h3 id="_5-2-数组元素访问" tabindex="-1"><a class="header-anchor" href="#_5-2-数组元素访问" aria-hidden="true">#</a> 5.2 数组元素访问</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>数组名<span class="token punctuation">[</span>索引<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>获取值</li><li>修改值</li></ul><h3 id="_5-3-索引" tabindex="-1"><a class="header-anchor" href="#_5-3-索引" aria-hidden="true">#</a> 5.3 索引</h3><p>一定从0开始、连续不间断、逐个+1增长</p><h3 id="_5-4-遍历" tabindex="-1"><a class="header-anchor" href="#_5-4-遍历" aria-hidden="true">#</a> 5.4 遍历</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">sout</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-5-两种初始化方式" tabindex="-1"><a class="header-anchor" href="#_5-5-两种初始化方式" aria-hidden="true">#</a> 5.5 两种初始化方式</h3><p>静态初始化：手动指定数组的元素，系统会根据元素的个数，计算出数组的长度。</p><p>动态初始化：手动指定数组长度，由系统给出默认初始化值。</p><h2 id="_6-方法" tabindex="-1"><a class="header-anchor" href="#_6-方法" aria-hidden="true">#</a> 6. 方法</h2><h3 id="_6-1-概述" tabindex="-1"><a class="header-anchor" href="#_6-1-概述" aria-hidden="true">#</a> 6.1 概述</h3><p>程序中最小的执行单元</p><h3 id="_6-2-定义与调用" tabindex="-1"><a class="header-anchor" href="#_6-2-定义与调用" aria-hidden="true">#</a> 6.2 定义与调用</h3><h4 id="无参数" tabindex="-1"><a class="header-anchor" href="#无参数" aria-hidden="true">#</a> 无参数</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> method <span class="token punctuation">(</span>    <span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 方法体;</span>
<span class="token punctuation">}</span>
<span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="有参数" tabindex="-1"><a class="header-anchor" href="#有参数" aria-hidden="true">#</a> 有参数</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getMax</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
<span class="token function">getMax</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="带返回值" tabindex="-1"><a class="header-anchor" href="#带返回值" aria-hidden="true">#</a> 带返回值</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isEvenNumber</span><span class="token punctuation">(</span> <span class="token keyword">int</span> number <span class="token punctuation">)</span> <span class="token punctuation">{</span>           
	<span class="token keyword">return</span> <span class="token boolean">true</span> <span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">boolean</span>  flag <span class="token operator">=</span>  isEvenNumber <span class="token punctuation">(</span> <span class="token number">5</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-3-实参与形参" tabindex="-1"><a class="header-anchor" href="#_6-3-实参与形参" aria-hidden="true">#</a> 6.3 实参与形参</h3><ul><li>形参：方法定义中的参数</li><li>实参：方法调用中的参数</li></ul><h3 id="_6-4-注意事项" tabindex="-1"><a class="header-anchor" href="#_6-4-注意事项" aria-hidden="true">#</a> 6.4 注意事项</h3><ul><li>方法不能嵌套使用</li><li>void表示无返回值，可以省略return，也可以单独的书写return，后面不加数据</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">methodOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">methodTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       		<span class="token comment">// 这里会引发编译错误!!!</span>
    	<span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

 <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">methodTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//return 100; 编译错误，因为没有具体返回值类型</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>	
        <span class="token comment">//System.out.println(100); return语句后面不能跟数据或代码</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-5-方法重载" tabindex="-1"><a class="header-anchor" href="#_6-5-方法重载" aria-hidden="true">#</a> 6.5 方法重载</h3><ul><li>多个方法在同一个类中</li><li>多个方法具有相同的方法名</li><li>多个方法的参数不相同，类型不同或者数量不同</li></ul><p>注意：重载仅针对<mark>同一个类</mark>中方法的名称与参数进行识别，<mark>与返回值无关</mark></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    	<span class="token comment">//方法体</span>
    <span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span> 	<span class="token comment">/*错误原因：重载与返回值无关*/</span>
    	<span class="token comment">//方法体</span>
    <span class="token punctuation">}</span>


<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodDemo01</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//方法体</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> 
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodDemo02</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/*错误原因：这是两个类的两个fn方法*/</span>
        <span class="token comment">//方法体</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-面向对象" tabindex="-1"><a class="header-anchor" href="#_7-面向对象" aria-hidden="true">#</a> 7. 面向对象</h2><h3 id="_7-1-类" tabindex="-1"><a class="header-anchor" href="#_7-1-类" aria-hidden="true">#</a> 7.1 类</h3><ul><li>属性：在类中通过成员变量来体现（类中方法外的变量）</li><li>行为：在类中通过成员方法来体现（和前面的方法相比去掉static关键字即可）</li></ul><p>示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Phone</span> <span class="token punctuation">{</span>
    <span class="token comment">//成员变量</span>
    <span class="token class-name">String</span> brand<span class="token punctuation">;</span>
    <span class="token keyword">int</span> price<span class="token punctuation">;</span>

    <span class="token comment">//成员方法</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;打电话&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-2-对象" tabindex="-1"><a class="header-anchor" href="#_7-2-对象" aria-hidden="true">#</a> 7.2 对象</h3><p>使用：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>类名 对象名 <span class="token operator">=</span> <span class="token keyword">new</span> 类名<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 创建</span>

对象名<span class="token punctuation">.</span>成员变量			<span class="token comment">// 调用</span>
对象名<span class="token punctuation">.</span>成员方法<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>多个对象在堆内存中，都有不同的内存划分，成员变量存储在各自的内存区域中，成员方法多个对象共用的一份</p><h3 id="_7-3-成员和局部变量" tabindex="-1"><a class="header-anchor" href="#_7-3-成员和局部变量" aria-hidden="true">#</a> 7.3 成员和局部变量</h3><blockquote><ol><li>成员变量（类中方法外）局部变量（方法内部或方法声明上）</li><li>成员变量（堆内存）局部变量（栈内存）</li><li>成员变量（随着对象的存在而存在，随着对象的消失而消失）局部变量（随着方法的调用而存在，随着方法的调用完毕而消失）</li><li>成员变量（有默认初始化值）局部变量（没有默认初始化值，必须先定义，赋值才能使用）</li></ol></blockquote><h3 id="_7-4-封装" tabindex="-1"><a class="header-anchor" href="#_7-4-封装" aria-hidden="true">#</a> 7.4 封装<sup class="footnote-ref"><a href="#footnote4">[4]</a><a class="footnote-anchor" id="footnote-ref4"></a></sup></h3><blockquote><p>面向对象三大特征之一<sup class="footnote-ref"><a href="#footnote5">[5]</a><a class="footnote-anchor" id="footnote-ref5"></a></sup></p></blockquote><p>实现：</p><p>成员变量private，提供对应的getXxx()/setXxx()方法</p><h4 id="private-关键字" tabindex="-1"><a class="header-anchor" href="#private-关键字" aria-hidden="true">#</a> private 关键字<sup class="footnote-ref"><a href="#footnote6">[6]</a><a class="footnote-anchor" id="footnote-ref6"></a></sup></h4><p>被private修饰的成员，只能在本类进行访问，针对private修饰的成员变量，如果需要被其他类使用，提供相应的操作</p><h4 id="this-关键字" tabindex="-1"><a class="header-anchor" href="#this-关键字" aria-hidden="true">#</a> this 关键字<sup class="footnote-ref"><a href="#footnote7">[7]</a><a class="footnote-anchor" id="footnote-ref7"></a></sup></h4><blockquote><ol><li>方法的形参如果与成员变量同名，不带this修饰的变量指的是形参，而不是成员变量</li><li>方法的形参没有与成员变量同名，不带this修饰的变量指的是成员变量</li><li>this出现在实例方法中，谁调用这个方法（哪个对象调用这个方法），this就代表谁（this就代表哪个对象）。</li><li>this出现在构造方法中，代表构造方法正在初始化的那个对象。</li></ol></blockquote><h3 id="_7-5-构造方法" tabindex="-1"><a class="header-anchor" href="#_7-5-构造方法" aria-hidden="true">#</a> 7.5 构造方法</h3><p>作用：创建对象，完成对象数据的初始化 Student stu = <strong>new Student();</strong></p><p>注意：</p><blockquote><ol><li>如果没有定义构造方法，系统将给出一个默认的无参数构造方法 如果定义了构造方法，系统将不再提供默认的构造方法</li><li>如果自定义了带参构造方法，还要使用无参数构造方法，就必须再写一个无参数构造方法</li><li>无论是否使用，都手工书写无参数构造方法</li></ol></blockquote><h4 id="标准类制作" tabindex="-1"><a class="header-anchor" href="#标准类制作" aria-hidden="true">#</a> 标准类制作</h4><p>① 类名需要见名知意</p><p>② 成员变量使用private修饰</p><p>③ 至少两个构造方法</p><ul><li>无参构造方法</li><li>带全部参数的构造方法</li></ul><p>④ 提供每一个成员变量对应的setXxx()/getXxx()</p><p>⑤ 其他行为</p><h3 id="_7-6-static-关键字" tabindex="-1"><a class="header-anchor" href="#_7-6-static-关键字" aria-hidden="true">#</a> 7.6 static 关键字</h3><p>被static修饰的成员是<strong>属于类</strong>的，放在静态区中随着类的加载而加载的，且只加载一次</p><p>没有static修饰的成员变量和方法则是<strong>属于对象</strong>的</p><div class="language-ajva line-numbers-mode" data-ext="ajva"><pre class="language-ajva"><code>修饰符 static 数据类型 变量名 = 初始值； 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="访问" tabindex="-1"><a class="header-anchor" href="#访问" aria-hidden="true">#</a> 访问</h4><ul><li>有static修饰成员变量，说明这个成员变量是属于类的，这个成员变量称为<strong>类变量</strong>或者<strong>静态成员变量</strong>。 直接用 类名访问即可。因为类只有一个，所以静态成员变量在内存区域中也只存在一份。所有的对象都可以共享这个变量。</li><li>无static修饰的成员变量属于每个对象的， 这个成员变量叫<strong>实例变量</strong>，之前我们写成员变量就是实例成员变量。实例成员变量属于每个对象，必须创建类的对象才可以访问。</li></ul><h3 id="_7-7-继承" tabindex="-1"><a class="header-anchor" href="#_7-7-继承" aria-hidden="true">#</a> 7.7 继承<sup class="footnote-ref"><a href="#footnote8">[8]</a><a class="footnote-anchor" id="footnote-ref8"></a></sup></h3><p>其中，多个类可以称为<strong>子类</strong>，单独被继承的那一个类称为<strong>父类</strong>、<strong>超类（superclass）<strong>或者</strong>基类</strong>。</p><blockquote><ol><li>提高<strong>代码的复用性</strong></li><li>使类与类之间产生了关系</li></ol></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> 子类 <span class="token keyword">extends</span> 父类 <span class="token punctuation">{</span>
	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><mark>Java是单继承的，一个类只能继承一个直接父类</mark></p><h4 id="子类继承的内容" tabindex="-1"><a class="header-anchor" href="#子类继承的内容" aria-hidden="true">#</a> 子类继承的内容</h4><ol><li><p>子类<mark>不能</mark>继承父类的<mark>构造方法</mark>。</p></li><li><p>子类可以继承父类的私有成员（成员变量，方法），只是子类无法直接访问而已，可以通过<mark>getter/setter</mark>方法访问父类的private成员变量。</p></li></ol><h4 id="继承后的特点" tabindex="-1"><a class="header-anchor" href="#继承后的特点" aria-hidden="true">#</a> 继承后的特点</h4><ol><li>子父类中出现了同名的成员变量时，子类会优先访问自己对象中的成员变量。如果此时想访问父类成员变量可以使用super关键字<sup class="footnote-ref"><a href="#footnote9">[9]</a><a class="footnote-anchor" id="footnote-ref9"></a></sup></li></ol><p>**使用格式: **</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">super</span><span class="token punctuation">.</span>父类成员变量名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li><p>如果子类父类中出现<strong>重名</strong>的成员方法，则创建子类对象调用该方法的时候，子类对象会优先调用自己的方法</p></li><li><p>构造方法的名字是与类名一致的。所以子类是无法继承父类构造方法的。</p><ul><li>子类构造方法的第一行都隐含了一个**super()**去调用父类无参数构造方法，**super()**可以省略不写。</li></ul></li></ol><h4 id="super和this" tabindex="-1"><a class="header-anchor" href="#super和this" aria-hidden="true">#</a> super和this</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">this</span><span class="token punctuation">.</span>成员变量    	<span class="token operator">--</span>    本类的
<span class="token keyword">super</span><span class="token punctuation">.</span>成员变量    	<span class="token operator">--</span>    父类的

<span class="token keyword">this</span><span class="token punctuation">.</span>成员方法名<span class="token punctuation">(</span><span class="token punctuation">)</span>  	<span class="token operator">--</span>    本类的    
<span class="token keyword">super</span><span class="token punctuation">.</span>成员方法名<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token operator">--</span>    父类的
    
<span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token operator">--</span> 调用父类的构造方法，根据参数匹配确认
<span class="token keyword">this</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token operator">--</span> 调用本类的其他构造方法，根据参数匹配确
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>super() 和 this() 都必须是在构造方法的第一行，所以<mark>不能同时出现</mark></p></li><li><p>手动调用父类构造会覆盖默认的super()</p></li><li><p>super(..)可以调用父类构造方法初始化继承自父类的成员变量的数据</p></li></ul><h4 id="方法重写" tabindex="-1"><a class="header-anchor" href="#方法重写" aria-hidden="true">#</a> 方法重写<sup class="footnote-ref"><a href="#footnote10">[10]</a><a class="footnote-anchor" id="footnote-ref10"></a></sup></h4><h5 id="override重写注解" tabindex="-1"><a class="header-anchor" href="#override重写注解" aria-hidden="true">#</a> @Override重写注解</h5><ul><li>这个注解标记的方法，就说明这个方法必须是重写父类的方法，否则编译阶段报错。</li><li>建议重写都加上这个注解，一方面可以提高代码的可读性，一方面可以防止重写出错</li></ul><p><mark>注意</mark></p><blockquote><ol><li>方法重写是发生在子父类之间的关系。</li><li>子类方法覆盖父类方法，必须要保证权限大于等于父类权限。</li><li>子类方法覆盖父类方法，返回值类型、函数名和参数列表都要一模一样。</li></ol></blockquote><h4 id="继承特点" tabindex="-1"><a class="header-anchor" href="#继承特点" aria-hidden="true">#</a> 继承特点</h4><ol><li>Java只支持单继承，不支持多继承</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 一个类只能有一个父类，不可以有多个父类。</span>
<span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">C1</span> <span class="token keyword">extends</span> <span class="token class-name">A</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// ok</span>
<span class="token comment">// class C2 extends A, B {} // error</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>一个类可以有多个子类</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// A可以有多个子类</span>
<span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">C1</span> <span class="token keyword">extends</span> <span class="token class-name">A</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">C2</span> <span class="token keyword">extends</span>  <span class="token class-name">A</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>可以多层继承</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">C1</span> <span class="token keyword">extends</span> <span class="token class-name">A</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">D</span> <span class="token keyword">extends</span> <span class="token class-name">C1</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>顶层父类是Object类。所有的类默认继承Object，作为父类。</p></blockquote><h2 id="_8-字符串" tabindex="-1"><a class="header-anchor" href="#_8-字符串" aria-hidden="true">#</a> 8. 字符串</h2><h3 id="_8-1-string" tabindex="-1"><a class="header-anchor" href="#_8-1-string" aria-hidden="true">#</a> 8.1 String<sup class="footnote-ref"><a href="#footnote11">[11]</a><a class="footnote-anchor" id="footnote-ref11"></a></sup></h3><p>特点</p><ul><li>字符串不可变，它们的值在创建后不能被更改</li><li>虽然 String 的值是不可变的，但是它们可以被共享</li><li>字符串效果上相当于字符数组( char[] )，但是底层原理是字节数组( byte[] )</li></ul><h4 id="常用的构造方法" tabindex="-1"><a class="header-anchor" href="#常用的构造方法" aria-hidden="true">#</a> 常用的构造方法</h4><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public String()</td><td>创建一个空白字符串对象，不含有任何内容</td></tr><tr><td>public String(char[] chs)</td><td>根据字符数组的内容，来创建字符串对象</td></tr><tr><td>public String(byte[] bys)</td><td>根据字节数组的内容，来创建字符串对象</td></tr><tr><td>String s = “abc”;</td><td>直接赋值的方式创建字符串对象，内容就是abc</td></tr></tbody></table><p>区别</p><ul><li><p>通过 new 创建的字符串对象，每一次 new 都会申请一个内存空间，虽然内容相同，但是地址值不同</p></li><li><p>直接赋值的字符串，只要字符序列相同(顺序和大小写)，无论在程序代码中出现几次，JVM 都只会建立一个 String 对象，并在字符串池中维护</p></li></ul><h4 id="字符串的比较" tabindex="-1"><a class="header-anchor" href="#字符串的比较" aria-hidden="true">#</a> 字符串的比较</h4><p>==号</p><blockquote><ul><li><p>比较基本数据类型：比较的是具体的值</p></li><li><p>比较引用数据类型：比较的是对象地址值</p></li></ul></blockquote><p>equals</p><blockquote><ul><li>比较两个字符串内容是否相同、区分大小写</li></ul></blockquote><h3 id="_8-2-stringbuilder" tabindex="-1"><a class="header-anchor" href="#_8-2-stringbuilder" aria-hidden="true">#</a> 8.2 StringBuilder</h3><p>StringBuilder 可以看成是一个容器，创建之后里面的内容是可变的。</p><p>在拼接字符串和反转字符串的时候会使用到</p><p>基本使用</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringBuilderDemo3</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//1.创建对象</span>
        <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 添加元素</span>
        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">// 反转</span>
        sb<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 获取长度</span>
        <span class="token keyword">int</span> len <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 因为StringBuilder是Java已经写好的类</span>
        <span class="token comment">// java在底层对他做了一些特殊处理。</span>
        <span class="token comment">// 打印对象不是地址值而是属性值。</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb<span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">// 把StringBuilder变回字符串</span>
        <span class="token class-name">String</span> str <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-3-stringjoiner" tabindex="-1"><a class="header-anchor" href="#_8-3-stringjoiner" aria-hidden="true">#</a> 8.3 StringJoiner</h3><ul><li>StringJoiner跟StringBuilder一样，也可以看成是一个容器，创建之后里面的内容是可变的。</li><li>作用：提高字符串的操作效率，而且代码编写特别简洁</li><li>JDK8出现的</li></ul><p>基本使用</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//1.创建对象, 指定间隔符号</span>
<span class="token class-name">StringJoiner</span> sj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringJoiner</span><span class="token punctuation">(</span><span class="token string">&quot;, &quot;</span> <span class="token punctuation">,</span> <span class="token string">&quot;[&quot;</span> <span class="token punctuation">,</span> <span class="token string">&quot;]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//2.添加元素</span>
sj<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;aaa&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;bbb&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;ccc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> len <span class="token operator">=</span> sj<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//15</span>

<span class="token comment">//3.打印</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[aaa, bbb, ccc]</span>
<span class="token class-name">String</span> str <span class="token operator">=</span> sj<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[aaa, bbb, ccc]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_9-集合" tabindex="-1"><a class="header-anchor" href="#_9-集合" aria-hidden="true">#</a> 9. 集合</h2><h3 id="_9-1-arraylist" tabindex="-1"><a class="header-anchor" href="#_9-1-arraylist" aria-hidden="true">#</a> 9.1 ArrayList</h3><h4 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h4><ul><li>提供一种存储空间可变的存储模型，存储的数据容量可以发生改变</li><li>长度可以变化，只能存储引用数据类型</li><li>用泛型约束集合中存储元素的数据类型</li></ul><blockquote><ol><li>长度可变</li><li>添加数据时不许考虑索引，默认添加到末尾</li></ol></blockquote><h4 id="构造方法" tabindex="-1"><a class="header-anchor" href="#构造方法" aria-hidden="true">#</a> 构造方法</h4><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public ArrayList()</td><td>创建一个空的集合对象</td></tr></tbody></table><h4 id="成员方法" tabindex="-1"><a class="header-anchor" href="#成员方法" aria-hidden="true">#</a> 成员方法</h4><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public boolean add(要添加的元素)</td><td>将指定的元素追加到此集合的末尾</td></tr><tr><td>public boolean remove(要删除的元素)</td><td>删除指定元素,返回值表示是否删除成功</td></tr><tr><td>public E remove(int index)</td><td>删除指定索引处的元素，返回被删除的元素</td></tr><tr><td>public E set(int index,E element)</td><td>修改指定索引处的元素，返回被修改的元素</td></tr><tr><td>public E get(int index)</td><td>返回指定索引处的元素</td></tr><tr><td>public int size()</td><td>返回集合中的元素的个数</td></tr></tbody></table><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="footnote1" class="footnote-item"><p>真正的DOS命令是1981年微软和IBM出品的MS-DOS操作系统中的命令才叫做DOS命令。而在Windows中，win98之前的操作系统是以非图形化的DOS为基础的，可以叫做DOS命令。到了2000年以后，windows逐渐的以图形化界面为主了，这个时候就不能叫DOS命令了，他只是模拟了DOS环境而已，很多的原本的DOS命令已经无法使用了，所以这个时候叫做CMD命令会更准确一些 <a href="#footnote-ref1" class="footnote-backref">↩︎</a></p></li><li id="footnote2" class="footnote-item"><p>e+38表示是乘以10的38次方，同样，e-45表示乘以10的负45次方。在java中整数默认是int类型，浮点数默认是double类型。 <a href="#footnote-ref2" class="footnote-backref">↩︎</a></p></li><li id="footnote3" class="footnote-item"><p>数组在内存中的位置 <a href="#footnote-ref3" class="footnote-backref">↩︎</a></p></li><li id="footnote4" class="footnote-item"><p>将类的某些信息隐藏在类内部，不允许外部程序直接访问，而是通过该类提供的方法来实现对隐藏信息的操作和访问 <a href="#footnote-ref4" class="footnote-backref">↩︎</a></p></li><li id="footnote5" class="footnote-item"><p>封装，继承，多态 <a href="#footnote-ref5" class="footnote-backref">↩︎</a></p></li><li id="footnote6" class="footnote-item"><p>private是一个修饰符，可以用来修饰成员（成员变量，成员方法） <a href="#footnote-ref6" class="footnote-backref">↩︎</a></p></li><li id="footnote7" class="footnote-item"><p>this修饰的变量用于指代成员变量，其主要作用是（区分局部变量和成员变量的重名问题） <a href="#footnote-ref7" class="footnote-backref">↩︎</a></p></li><li id="footnote8" class="footnote-item"><p>就是子类继承父类的<strong>属性</strong>和<strong>行为</strong>，使得子类对象可以直接具有与父类相同的属性、相同的行为。子类可以直接访问父类中的<strong>非私有</strong>的属性和行为。 <a href="#footnote-ref8" class="footnote-backref">↩︎</a></p></li><li id="footnote9" class="footnote-item"><p>子父类中出现了同名的成员变量时，在子类中需要访问父类中非私有成员变量时，需要使用<code>super</code> 关键字，修饰父类成员变量，类似于之前学过的this <a href="#footnote-ref9" class="footnote-backref">↩︎</a></p></li><li id="footnote10" class="footnote-item"><p>子类中出现与父类一模一样的方法时（返回值类型，方法名和参数列表都相同），会出现覆盖效果，也称为重写或者复写 <a href="#footnote-ref10" class="footnote-backref">↩︎</a></p></li><li id="footnote11" class="footnote-item"><p>Java 程序中所有的双引号字符串，都是 String 类的对象。String 类在 java.lang 包下，所以使用的时候不需要导包！ <a href="#footnote-ref11" class="footnote-backref">↩︎</a></p></li></ol></section>`,240),o=[p];function l(i,c){return a(),s("div",null,o)}const u=n(e,[["render",l],["__file","Java基础.html.vue"]]);export{u as default};
